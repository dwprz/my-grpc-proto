// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: proto/bank/service.proto

package bank

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BankService_GetCurrentBalance_FullMethodName = "/bank.BankService/GetCurrentBalance"
)

// BankServiceClient is the client API for BankService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BankServiceClient interface {
	GetCurrentBalance(ctx context.Context, in *CurrentBalanceRequest, opts ...grpc.CallOption) (*CurrentBalanceResponse, error)
}

type bankServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBankServiceClient(cc grpc.ClientConnInterface) BankServiceClient {
	return &bankServiceClient{cc}
}

func (c *bankServiceClient) GetCurrentBalance(ctx context.Context, in *CurrentBalanceRequest, opts ...grpc.CallOption) (*CurrentBalanceResponse, error) {
	out := new(CurrentBalanceResponse)
	err := c.cc.Invoke(ctx, BankService_GetCurrentBalance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BankServiceServer is the server API for BankService service.
// All implementations must embed UnimplementedBankServiceServer
// for forward compatibility
type BankServiceServer interface {
	GetCurrentBalance(context.Context, *CurrentBalanceRequest) (*CurrentBalanceResponse, error)
	mustEmbedUnimplementedBankServiceServer()
}

// UnimplementedBankServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBankServiceServer struct {
}

func (UnimplementedBankServiceServer) GetCurrentBalance(context.Context, *CurrentBalanceRequest) (*CurrentBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentBalance not implemented")
}
func (UnimplementedBankServiceServer) mustEmbedUnimplementedBankServiceServer() {}

// UnsafeBankServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BankServiceServer will
// result in compilation errors.
type UnsafeBankServiceServer interface {
	mustEmbedUnimplementedBankServiceServer()
}

func RegisterBankServiceServer(s grpc.ServiceRegistrar, srv BankServiceServer) {
	s.RegisterService(&BankService_ServiceDesc, srv)
}

func _BankService_GetCurrentBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CurrentBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankServiceServer).GetCurrentBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankService_GetCurrentBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankServiceServer).GetCurrentBalance(ctx, req.(*CurrentBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BankService_ServiceDesc is the grpc.ServiceDesc for BankService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BankService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bank.BankService",
	HandlerType: (*BankServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCurrentBalance",
			Handler:    _BankService_GetCurrentBalance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/bank/service.proto",
}

const (
	BankAccountsService_CreateBankAccount_FullMethodName   = "/bank.BankAccountsService/CreateBankAccount"
	BankAccountsService_FindByAccountNumber_FullMethodName = "/bank.BankAccountsService/FindByAccountNumber"
	BankAccountsService_UpdateBankAccount_FullMethodName   = "/bank.BankAccountsService/UpdateBankAccount"
)

// BankAccountsServiceClient is the client API for BankAccountsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BankAccountsServiceClient interface {
	CreateBankAccount(ctx context.Context, in *BankAccountRequest, opts ...grpc.CallOption) (*BankAccountResponse, error)
	FindByAccountNumber(ctx context.Context, in *BankAccountNumber, opts ...grpc.CallOption) (*BankAccountResponse, error)
	UpdateBankAccount(ctx context.Context, in *BankAccountRequest, opts ...grpc.CallOption) (*BankAccountResponse, error)
}

type bankAccountsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBankAccountsServiceClient(cc grpc.ClientConnInterface) BankAccountsServiceClient {
	return &bankAccountsServiceClient{cc}
}

func (c *bankAccountsServiceClient) CreateBankAccount(ctx context.Context, in *BankAccountRequest, opts ...grpc.CallOption) (*BankAccountResponse, error) {
	out := new(BankAccountResponse)
	err := c.cc.Invoke(ctx, BankAccountsService_CreateBankAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankAccountsServiceClient) FindByAccountNumber(ctx context.Context, in *BankAccountNumber, opts ...grpc.CallOption) (*BankAccountResponse, error) {
	out := new(BankAccountResponse)
	err := c.cc.Invoke(ctx, BankAccountsService_FindByAccountNumber_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankAccountsServiceClient) UpdateBankAccount(ctx context.Context, in *BankAccountRequest, opts ...grpc.CallOption) (*BankAccountResponse, error) {
	out := new(BankAccountResponse)
	err := c.cc.Invoke(ctx, BankAccountsService_UpdateBankAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BankAccountsServiceServer is the server API for BankAccountsService service.
// All implementations must embed UnimplementedBankAccountsServiceServer
// for forward compatibility
type BankAccountsServiceServer interface {
	CreateBankAccount(context.Context, *BankAccountRequest) (*BankAccountResponse, error)
	FindByAccountNumber(context.Context, *BankAccountNumber) (*BankAccountResponse, error)
	UpdateBankAccount(context.Context, *BankAccountRequest) (*BankAccountResponse, error)
	mustEmbedUnimplementedBankAccountsServiceServer()
}

// UnimplementedBankAccountsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBankAccountsServiceServer struct {
}

func (UnimplementedBankAccountsServiceServer) CreateBankAccount(context.Context, *BankAccountRequest) (*BankAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBankAccount not implemented")
}
func (UnimplementedBankAccountsServiceServer) FindByAccountNumber(context.Context, *BankAccountNumber) (*BankAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByAccountNumber not implemented")
}
func (UnimplementedBankAccountsServiceServer) UpdateBankAccount(context.Context, *BankAccountRequest) (*BankAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBankAccount not implemented")
}
func (UnimplementedBankAccountsServiceServer) mustEmbedUnimplementedBankAccountsServiceServer() {}

// UnsafeBankAccountsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BankAccountsServiceServer will
// result in compilation errors.
type UnsafeBankAccountsServiceServer interface {
	mustEmbedUnimplementedBankAccountsServiceServer()
}

func RegisterBankAccountsServiceServer(s grpc.ServiceRegistrar, srv BankAccountsServiceServer) {
	s.RegisterService(&BankAccountsService_ServiceDesc, srv)
}

func _BankAccountsService_CreateBankAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BankAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankAccountsServiceServer).CreateBankAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankAccountsService_CreateBankAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankAccountsServiceServer).CreateBankAccount(ctx, req.(*BankAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankAccountsService_FindByAccountNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BankAccountNumber)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankAccountsServiceServer).FindByAccountNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankAccountsService_FindByAccountNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankAccountsServiceServer).FindByAccountNumber(ctx, req.(*BankAccountNumber))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankAccountsService_UpdateBankAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BankAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankAccountsServiceServer).UpdateBankAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankAccountsService_UpdateBankAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankAccountsServiceServer).UpdateBankAccount(ctx, req.(*BankAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BankAccountsService_ServiceDesc is the grpc.ServiceDesc for BankAccountsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BankAccountsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bank.BankAccountsService",
	HandlerType: (*BankAccountsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBankAccount",
			Handler:    _BankAccountsService_CreateBankAccount_Handler,
		},
		{
			MethodName: "FindByAccountNumber",
			Handler:    _BankAccountsService_FindByAccountNumber_Handler,
		},
		{
			MethodName: "UpdateBankAccount",
			Handler:    _BankAccountsService_UpdateBankAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/bank/service.proto",
}
